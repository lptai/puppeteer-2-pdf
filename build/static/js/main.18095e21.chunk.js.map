{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","InputURL","Input","Header","h1","App","useState","url","setUrl","isSending","setIsSending","handleConverToPdf","useCallback","e","a","async","preventDefault","axios","get","responseType","headers","Accept","then","response","blob","Blob","data","type","link","document","createElement","href","window","URL","createObjectURL","download","click","value","size","onChange","target","disabled","allowClear","color","onClick","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8oBAQA,IAAMA,EAAYC,IAAOC,IAAV,KAQTC,EAAWF,YAAOG,IAAPH,CAAH,KAIRI,EAASJ,IAAOK,GAAV,KAwDGC,MApDf,WAAgB,IAAD,EACWC,qBADX,mBACJC,EADI,KACCC,EADD,OAEuBF,oBAAS,GAFhC,mBAEJG,EAFI,KAEOC,EAFP,KAGLC,EAAoBC,uBACtB,SAAMC,GAAN,SAAAC,EAAAC,OAAA,oDACQN,GAAcF,EADtB,wDAIIM,EAAEG,iBAEFN,GAAa,GANjB,WAAAI,EAAA,MASUG,IACDC,IADC,UAf6D,GAe7D,uBACwBX,GAAO,CAC7BY,aAAc,cACdC,QAAS,CACL,eAAgB,mBAChBC,OAAQ,qBAGfC,MAAK,SAAAC,GACF,IAAIC,EAAO,IAAIC,KAAK,CAACF,EAASG,MAAO,CAAEC,KAAM,oBACzCC,EAAOC,SAASC,cAAc,KAClCF,EAAKG,KAAOC,OAAOC,IAAIC,gBAAgBV,GACvCI,EAAKO,SAAW,cAChBP,EAAKQ,YAtBjB,OAyBI1B,GAAa,GAzBjB,uCA2BA,CAACD,EAAWF,IAGhB,OACI,kBAACT,EAAD,KACI,kBAACK,EAAD,4BACA,kBAACF,EAAD,CACI0B,KAAK,MACLU,MAAO9B,EACP+B,KAAK,QACLC,SAAU,SAAA1B,GAAC,OAAIL,EAAOK,EAAE2B,OAAOH,QAC/BI,SAAUhC,EACViC,YAAU,IAEd,kBAAC,IAAD,CAAQC,MAAM,UAAUC,QAASjC,EAAmB8B,SAAUhC,GAA9D,oBCzDQoC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASsB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.18095e21.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Input, Button } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\n\nimport './App.css';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 80%;\n`;\n\nconst InputURL = styled(Input)`\n    width: 20%;\n    margin: 20px;\n`;\nconst Header = styled.h1``;\n\nconst API = process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : '';\n\nfunction App() {\n    const [url, setUrl] = useState();\n    const [isSending, setIsSending] = useState(false);\n    const handleConverToPdf = useCallback(\n        async e => {\n            if (isSending || !url) {\n                return;\n            }\n            e.preventDefault();\n\n            setIsSending(true);\n\n            // call api\n            await axios\n                .get(`${API}/getPdf?url=${url}`, {\n                    responseType: 'arraybuffer',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Accept: 'application/pdf',\n                    },\n                })\n                .then(response => {\n                    let blob = new Blob([response.data], { type: 'application/pdf' });\n                    let link = document.createElement('a');\n                    link.href = window.URL.createObjectURL(blob);\n                    link.download = 'Results.pdf';\n                    link.click();\n                });\n\n            setIsSending(false);\n        },\n        [isSending, url],\n    );\n\n    return (\n        <Container>\n            <Header>Convert HTML To PDF</Header>\n            <InputURL\n                type=\"url\"\n                value={url}\n                size=\"large\"\n                onChange={e => setUrl(e.target.value)}\n                disabled={isSending}\n                allowClear\n            />\n            <Button color=\"primary\" onClick={handleConverToPdf} disabled={isSending}>\n                Convert to pdf\n            </Button>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}